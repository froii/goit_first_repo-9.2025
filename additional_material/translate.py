# ========== 1. –ë–ê–ó–û–í–Ü –ü–†–ò–ö–õ–ê–î–ò ==========

def basic_examples():
    # –ü—Ä–æ—Å—Ç–∞ –∑–∞–º—ñ–Ω–∞
    table = str.maketrans('aeiou', '12345')
    text = "Hello World"
    print(f"–û—Ä–∏–≥—ñ–Ω–∞–ª: {text}")
    print(f"–ó–∞–º—ñ–Ω–∞ –≥–æ–ª–æ—Å–Ω–∏—Ö: {text.translate(table)}")
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤
    table = str.maketrans('', '', 'aeiou')
    print(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è –≥–æ–ª–æ—Å–Ω–∏—Ö: {text.translate(table)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    table = str.maketrans('a', 'X')
    test = "Aa"
    print(f"\n'{test}' ‚Üí '{test.translate(table)}' (—Ç—ñ–ª—å–∫–∏ –Ω–∏–∂–Ω—ñ–π 'a' –∑–∞–º—ñ–Ω–∏–≤—Å—è)")
    print()


# ========== 2. –ü–†–ò–ö–õ–ê–î: HEX ‚Üí BINARY ==========
def hex_to_binary():
    symbols = "0123456789ABCDEF"
    code = [
        '0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111',
        '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'
    ]
    
    MAP = {}
    for s, c in zip(symbols, code):
        MAP[ord(s)] = c + ' '  # –î–æ–¥–∞—î–º–æ –ø—Ä–æ–±—ñ–ª –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        MAP[ord(s.lower())] = c + ' '
    
    hex_string = "34 DF 56 AC"
    result = hex_string.translate(MAP).strip()
    print(f"HEX: {hex_string}")
    print(f"BIN: {result}")
    print()


# ========== 3. –ü–†–ò–ö–õ–ê–î: –ê–ó–ë–£–ö–ê –ú–û–†–ó–ï ==========
def text_to_morse():
    morse_dict = {
        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
        'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---',
        '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...',
        '8': '---..', '9': '----.', ' ': '/'
    }
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É
    table = {ord(k): v + ' ' for k, v in morse_dict.items()}
    
    text = "Hello World"
    result = text.upper().translate(table).strip()
    print(f"–¢–µ–∫—Å—Ç: {text}")
    print(f"–ú–æ—Ä–∑–µ: {result}")
    print()


# ========== 4. –†–ï–ê–õ–¨–ù–Ü –°–¶–ï–ù–ê–†–Ü–á ==========

def practical_examples():
    """–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è"""
    print("=== –ü–†–ê–ö–¢–ò–ß–ù–Ü –ü–†–ò–ö–õ–ê–î–ò ===\n")
    
    # –û—á–∏—â–µ–Ω–Ω—è URL
    table = str.maketrans(' ', '-', '!@#$%^&*()')
    url_text = "My @Blog Post!"
    print(f"URL slug: '{url_text}' ‚Üí '{url_text.translate(table)}'")
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó
    import string
    table = str.maketrans('', '', string.punctuation)
    text = "Hello, world! How are you?"
    print(f"–ë–µ–∑ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó: '{text.translate(table)}'")
    
    # –ú–∞—Å–∫—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
    table = str.maketrans('0123456789', 'X' * 10)
    card = "1234 5678 9012 3456"
    masked = card[:4] + card[4:14].translate(table) + card[14:]
    print(f"–ö–∞—Ä—Ç–∫–∞: {card} ‚Üí {masked}")
    
    # –ï–º–æ–¥–∑—ñ-–∫–æ–¥—É–≤–∞–Ω–Ω—è
    table = {ord('!'): 'üí•', ord('?'): '‚ùì', ord('.'): '‚≠ê'}
    text = "Hello! How are you?"
    print(f"–ï–º–æ–¥–∑—ñ: {text.translate(table)}")
    print()


# ========== 5. –°–õ–û–í–ù–ò–ö VS MAKETRANS ==========

def dict_vs_maketrans():
    """–†—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ"""
    print("=== –°–õ–û–í–ù–ò–ö VS MAKETRANS ===\n")
    
    # –ú–µ—Ç–æ–¥ 1: maketrans (–ø—Ä–æ—Å—Ç—ñ—à–µ)
    table1 = str.maketrans('abc', 'XYZ')
    print(f"maketrans: 'abc' ‚Üí {repr('abc'.translate(table1))}")
    
    # –ú–µ—Ç–æ–¥ 2: —Å–ª–æ–≤–Ω–∏–∫ (–≥–Ω—É—á–∫—ñ—à–µ)
    table2 = {ord('a'): 'XX', ord('b'): None, ord('c'): 'Z'}
    print(f"–°–ª–æ–≤–Ω–∏–∫: 'abc' ‚Üí {repr('abc'.translate(table2))}")
    print("  (a‚ÜíXX, b‚Üí–≤–∏–¥–∞–ª–µ–Ω–æ, c‚ÜíZ)")
    print()


# ========== 6. –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü ==========

def performance_comparison():
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ translate vs replace"""
    print("=== –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –®–í–ò–î–ö–û–°–¢–Ü ===\n")
    import time
    
    text = "a" * 100000
    
    # replace (–ø–æ–≤—ñ–ª—å–Ω–æ)
    start = time.time()
    result = text
    for char in "aeiou":
        result = result.replace(char, "X")
    time_replace = time.time() - start
    
    # translate (—à–≤–∏–¥–∫–æ)
    start = time.time()
    table = str.maketrans("aeiou", "XXXXX")
    result = text.translate(table)
    time_translate = time.time() - start
    
    print(f"replace(): {time_replace:.5f} —Å–µ–∫")
    print(f"translate(): {time_translate:.5f} —Å–µ–∫")
    print(f"translate() —à–≤–∏–¥—à–∏–π —É {time_replace/time_translate:.1f} —Ä–∞–∑—ñ–≤")
    print()


# ========== 7. –ü–Ü–î–í–û–î–ù–Ü –ö–ê–ú–ï–ù–Ü ==========

def common_mistakes():
    """–¢–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏"""
    print("=== –¢–ò–ü–û–í–Ü –ü–û–ú–ò–õ–ö–ò ===\n")
    
    # –ü–æ–º–∏–ª–∫–∞ 1: –ó–∞–±—É–ª–∏ ord()
    try:
        table = {'a': 'X'}
        result = "abc".translate(table['a'])
        print(result)  # –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω–µ 'abc' . –ø–æ–º–∏–ª–æ–∫ –Ω–µ –±—É–¥–µ
    except TypeError as e:  
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–µ–∑ ord(): {e}")  # –Ω–µ –±—É–¥–µ –ø–æ–º–∏–ª–∫–∏ –∞–ª–µ —ñ –∑–º—ñ–Ω –Ω–µ –±—É–¥–µ
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ
    table = {ord('a'): 'X'}
    print(f"‚úÖ –ó ord(): 'abc' ‚Üí '{('abc'.translate(table))}'")
    
    # –ü–æ–º–∏–ª–∫–∞ 2: None –≤–∏–¥–∞–ª—è—î —Å–∏–º–≤–æ–ª
    table = {ord('a'): None}
    print(f"\nNone –≤–∏–¥–∞–ª—è—î: 'banana' ‚Üí '{'banana'.translate(table)}'")
    print()


# ========== 8. ORD() –Ü UNICODE ==========

def ord_examples():
    """–†–æ–±–æ—Ç–∞ –∑ ord() —Ç–∞ Unicode"""
    print("=== ORD() –¢–ê UNICODE ===\n")
    
    print(f"ord('A') = {ord('A')}")
    print(f"ord('a') = {ord('a')}")
    print(f"ord('–Ø') = {ord('–Ø')}")
    print(f"chr(65) = '{chr(65)}'")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ Unicode
    table = {65: 'X', 97: 'y'}  # 65='A', 97='a'
    print(f"\n'AaBbCc'.translate(table) = '{'AaBbCc'.translate(table)}'")
    print()


# ========== –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø ==========

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤"""
    basic_examples()
    hex_to_binary()
    text_to_morse()
    practical_examples()
    dict_vs_maketrans()
    performance_comparison()
    common_mistakes()
    ord_examples()
    
    print("=== –ü–Ü–î–°–£–ú–û–ö ===")
    print("‚úÖ translate() - –¥–ª—è –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –∑–∞–º—ñ–Ω")
    print("‚úÖ maketrans() - –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ")
    print("‚úÖ ord() - –¥–ª—è Unicode-–∫–æ–¥—ñ–≤")
    print("‚úÖ –®–≤–∏–¥—à–∏–π —É 3-5 —Ä–∞–∑—ñ–≤ –∑–∞ replace()")


if __name__ == "__main__":
    main()